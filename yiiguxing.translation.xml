<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="420" />
    <option name="newTranslationDialogWidth" value="517" />
    <option name="newTranslationDialogX" value="221" />
    <option name="newTranslationDialogY" value="164" />
    <histories>
      <item value="Placeholder" />
      <item value="Edit Text Dialog Builder" />
      <item value="The corresponding parameter in the supertype 'DialogOnClickListener' is named 'bitmap'. This may cause problems when calling this function with named arguments." />
      <item value="direction" />
      <item value="Drawable used to indicate the currently selected item in the list." />
      <item value="Sets the state-based animator for the View." />
      <item value="This attribute is ignored in API level 14 ({@link android.os.Build.VERSION_CODESICE_CREAM_SANDWICH}) and higher. Using fading edges may introduce noticeable performance degradations and should be used only when required by the application's visual design. To request fading edges with API level 14 and above, use the android:requiresFadingEdge attribute instead." />
      <item value="Expression 'ArrayList&lt;ButtonAttr&gt;' of type 'kotlin.collections.ArrayList&lt;MainActivity.ButtonAttr&gt; = java.util.ArrayList&lt;MainActivity.ButtonAttr&gt; ' cannot be invoked as a function. The function 'invoke()' is not found" />
      <item value="Property delegate must have a 'getValue(MainActivity.ButtonListAdapter, KProperty&gt;)' method. None of the following functions are suitable." />
      <item value="Val cannot be reassigned" />
      <item value="This type has a constructor, and thus must be initialized here" />
      <item value="Modifier 'private' is not applicable to 'local class'" />
      <item value="Drawable or color to draw between list items." />
      <item value="String Builder" />
      <item value="Multiple vararg-parameters are prohibited" />
      <item value="String literal in setText can not be translated. Use Android resources instead." />
      <item value="result Area" />
      <item value="get Address" />
      <item value="No address associated with hostname" />
      <item value="A methodconstructor annotated with TestOnly claims that it should be called from testing code only. Apart from documentation purposes this annotation is intended to be used by static analysis tools to validate against element contract violations." />
      <item value="Smart cast to 'AlertDialog' is impossible, because 'waitDialog' is a mutable property that could have been changed by this time" />
      <item value="RESULT UNCHANGED SHOWN" />
      <item value="Suspicious cast to InputMethodService for a INPUT_SERVICE: expected InputManager" />
      <item value="This can only happen during construction." />
      <item value="un onQueryTextChange(newText: String?): Boolean defined in com.mingz.frameworkkotlin.mvp.view.impl.MvpMainActivity.myListener.&lt;no name provided&gt; 重写以下类接口中的声明： [Java] interface OnQueryTextListener 是否要 find usages of 基类声明？" />
      <item value="Interface MvpMainPresenter does not have constructors" />
      <item value="There's a cycle in the inheritance hierarchy for this type" />
      <item value="Modifier 'open' is redundant for 'interface'" />
      <item value="entiy" />
      <item value="City Info" />
      <item value="hidden value" />
      <item value="hidden" />
      <item value="隐藏资源" />
      <item value="hides" />
      <item value="hide" />
      <item value="隐秘的" />
      <item value="Sensitive" />
      <item value="敏感信息" />
      <item value="敏感" />
      <item value="SystemUiVisibility flags are deprecated. Use WindowInsetsController instead." />
      <item value="Parameter 'TAG' is uninitialized here" />
      <item value="utils" />
      <item value="util" />
      <item value="Register a BroadcastReceiver to be run in the main activity thread. The receiver will be called with any broadcast Intent that matches filter, in the main application thread. The system may broadcast Intents that are &quot;sticky&quot; -- these stay around after the broadcast has finished, to be sent to any later registrations. If your IntentFilter matches one of these sticky Intents, that Intent will be returned by this function and sent to your receiver as if it had just been broadcast. There may be multiple sticky Intents that match filter, in which case each of these will be sent to receiver. In this case, only one of these can be returned directly by the function; which of these that is returned is arbitrarily decided by the system. If you know the Intent your are registering for is sticky, you can supply null for your receiver. In this case, no receiver is registered -- the function simply returns the sticky Intent that matches filter. In the case of multiple matches, the same rules as described above apply. See BroadcastReceiver for more information on Intent broadcasts. As of Build.VERSION_CODES.ICE_CREAM_SANDWICH, receivers registered with this method will correctly respect the Intent.setPackage(String) specified for an Intent being broadcast. Prior to that, it would be ignored and delivered to all matching registered receivers. Be careful if using this for security. Note: this method cannot be called from a BroadcastReceiver component; that is, from a BroadcastReceiver that is declared in an application's manifest. It is okay, however, to call this method from another BroadcastReceiver that has itself been registered at run time with registerReceiver, since the lifetime of such a registered BroadcastReceiver is tied to the object that registered it." />
      <item value="operation" />
      <item value="Marks the JVM backing field of the annotated property as volatile, meaning that writes to this field are immediately made visible to other threads." />
      <item value="init Crash Report" />
      <item value="Rename parameter arguments, choose names that match" />
      <item value="Use Compat Loading For Drawables" />
      <item value="HG Scan Manager" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1237" />
        <entry key="ENGLISH" value="1238" />
        <entry key="DANISH" value="3" />
        <entry key="GERMAN" value="8" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="FILIPINO" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAYALAM" value="1" />
        <entry key="BENGALI" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="3" />
        <entry key="SLOVAK" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="5" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1624975585516" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20200918000568375" />
      </app-key>
    </option>
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="2f2d5e6a9f7e1244" />
      </youdao-translate>
    </option>
  </component>
</application>