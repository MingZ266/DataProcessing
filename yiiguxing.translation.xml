<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="420" />
    <option name="newTranslationDialogWidth" value="349" />
    <option name="newTranslationDialogX" value="221" />
    <option name="newTranslationDialogY" value="164" />
    <histories>
      <item value="Multi Format One D Reader" />
      <item value="PULL PAPER" />
      <item value="on Destory" />
      <item value="adjust Bitmap" />
      <item value="regulate" />
      <item value="correction" />
      <item value="Task already scheduled or cancelled" />
      <item value="Decode an image using the state set up by calling setHints() previously. Continuous scan clients will get a large speed increase by using this instead of decode(). Parameters: image - The pixel data to decode Returns: The contents of the image Throws: NotFoundException - Any errors which occurred" />
      <item value="raw" />
      <item value="This class implements a local thresholding algorithm, which while slower than the GlobalHistogramBinarizer, is fairly efficient for what it does. It is designed for high frequency images of barcodes with black data on white backgrounds. For this application, it does a much better job than a global blackpoint with severe shadows and gradients. However it tends to produce artifacts on lower frequency images and is therefore not a good general purpose binarizer for uses outside ZXing. This class extends GlobalHistogramBinarizer, using the older histogram approach for 1D readers, and the newer local approach for 2D readers. 1D decoding using a per-row histogram is already inherently local, and only fails for horizontal gradients. We can revisit that problem later, but for now it was not a win to use local blocks for 1D. This Binarizer is the default for the unit tests and the recommended class for library users." />
      <item value="This Binarizer implementation uses the old ZXing global histogram approach. It is suitable for low-end mobile devices which don't have enough CPU or memory to use a local thresholding algorithm. However, because it picks a global black point, it cannot handle difficult shadows and gradients. Faster mobile devices and all desktop applications should probably use HybridBinarizer instead." />
      <item value="This class hierarchy provides a set of methods to convert luminance data to 1 bit data. It allows the algorithm to vary polymorphically, for example allowing a very expensive thresholding technique for servers and a fast one for mobile. It also permits the implementation to vary, e.g. a JNI version for Android and a Java fallback version for other platforms." />
      <item value="Hybrid Binarizer" />
      <item value="stride" />
      <item value="A wrapper implementation of LuminanceSource which inverts the luminances it returns -- black becomes white and vice versa, and each value becomes (255-value)." />
      <item value="This class is used to help decode images from files which arrive as RGB data from an ARGB pixel array. It does not support rotation." />
      <item value="get Framing Rect In Preview" />
      <item value="BATTERY CHANGED" />
      <item value="Pushes a message onto the end of the message queue after all pending messages before the current time. It will be received in {@link handleMessage}, in the thread attached to this handler. @return Returns true if the message was successfully placed in to the message queue. Returns false on failure, usually because the looper processing the message queue is exiting." />
      <item value="native Wake" />
      <item value="what – Value to assign to the returned Message.what field. arg1 – Value to assign to the returned Message.arg1 field. arg2 – Value to assign to the returned Message.arg2 field. obj – Value to assign to the returned Message.obj field." />
      <item value="Acquires in shared mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once tryAcquireShared, returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking tryAcquireShared until success or the thread is interrupted." />
      <item value="ambient Light Manager" />
      <item value="Planar YUV Luminance Source" />
      <item value="Multi Format Reader" />
      <item value="Preferences Activity" />
      <item value="handle Decode" />
      <item value="send Reply Message" />
      <item value="Inactivity Timer" />
      <item value="Ambient Light Manager" />
      <item value="set Volume Control Stream" />
      <item value="Could not create an instance of type sync_studio_tooling1492_9bz1fim877w6hgbtbf1jmi8rp. &gt; Could not initialize class org.codehaus.groovy.reflection.ReflectionCache" />
      <item value="Could not open cp_init generic class cache for initialization script" />
      <item value="is not accessible for the namespace" />
      <item value="dlopen failed" />
      <item value="Clears the content of this string builder making it empty and returns this instance." />
      <item value="single" />
      <item value="create Line Segment Detector" />
      <item value="No implementation found for void" />
      <item value="NONE" />
      <item value="String Builder" />
      <item value="NOTE: Do not place your application dependencies here; they belong in the individual module build.gradle files" />
      <item value="may be corrupted." />
      <item value="finalize" />
      <item value="Cannot initialize return object of type 'jint' (aka 'int') with an rvalue of type 'jstring' (aka '_jstring ')" />
      <item value="cannot initialize return object of type 'jint' (aka 'int') with an rvalue of type 'jstring' (aka '_jstring ')" />
      <item value="Specifies the target library." />
      <item value="android:statusBarColor has already been defined in this &lt;style&gt; (Previously defined here)" />
      <item value="android:statusBarColor has already been defined in this &lt;style&gt;" />
      <item value="Links the target library to the log library included in the NDK." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1386" />
        <entry key="ENGLISH" value="1387" />
        <entry key="ICELANDIC" value="1" />
        <entry key="DANISH" value="3" />
        <entry key="GERMAN" value="8" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="3" />
        <entry key="FILIPINO" value="1" />
        <entry key="CATALAN" value="2" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAYALAM" value="1" />
        <entry key="BENGALI" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="3" />
        <entry key="SLOVAK" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="5" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1626845279586" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20200918000568375" />
      </app-key>
    </option>
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="2f2d5e6a9f7e1244" />
      </youdao-translate>
    </option>
  </component>
</application>