<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="420" />
    <option name="newTranslationDialogWidth" value="553" />
    <option name="newTranslationDialogX" value="221" />
    <option name="newTranslationDialogY" value="164" />
    <histories>
      <item value="City Info" />
      <item value="hidden value" />
      <item value="hidden" />
      <item value="隐藏资源" />
      <item value="hides" />
      <item value="hide" />
      <item value="隐秘的" />
      <item value="Sensitive" />
      <item value="敏感信息" />
      <item value="敏感" />
      <item value="SystemUiVisibility flags are deprecated. Use WindowInsetsController instead." />
      <item value="Parameter 'TAG' is uninitialized here" />
      <item value="utils" />
      <item value="util" />
      <item value="Register a BroadcastReceiver to be run in the main activity thread. The receiver will be called with any broadcast Intent that matches filter, in the main application thread. The system may broadcast Intents that are &quot;sticky&quot; -- these stay around after the broadcast has finished, to be sent to any later registrations. If your IntentFilter matches one of these sticky Intents, that Intent will be returned by this function and sent to your receiver as if it had just been broadcast. There may be multiple sticky Intents that match filter, in which case each of these will be sent to receiver. In this case, only one of these can be returned directly by the function; which of these that is returned is arbitrarily decided by the system. If you know the Intent your are registering for is sticky, you can supply null for your receiver. In this case, no receiver is registered -- the function simply returns the sticky Intent that matches filter. In the case of multiple matches, the same rules as described above apply. See BroadcastReceiver for more information on Intent broadcasts. As of Build.VERSION_CODES.ICE_CREAM_SANDWICH, receivers registered with this method will correctly respect the Intent.setPackage(String) specified for an Intent being broadcast. Prior to that, it would be ignored and delivered to all matching registered receivers. Be careful if using this for security. Note: this method cannot be called from a BroadcastReceiver component; that is, from a BroadcastReceiver that is declared in an application's manifest. It is okay, however, to call this method from another BroadcastReceiver that has itself been registered at run time with registerReceiver, since the lifetime of such a registered BroadcastReceiver is tied to the object that registered it." />
      <item value="operation" />
      <item value="Marks the JVM backing field of the annotated property as volatile, meaning that writes to this field are immediately made visible to other threads." />
      <item value="init Crash Report" />
      <item value="Rename parameter arguments, choose names that match" />
      <item value="Use Compat Loading For Drawables" />
      <item value="HG Scan Manager" />
      <item value="The expression is unused" />
      <item value="Subscribes to the current Observable and provides callbacks to handle the items it emits and any error notification it signals. Scheduler: subscribe does not operate by default on a particular Scheduler. Parameters: onNext - the Consumer&lt;T&gt; you have designed to accept emissions from the current Observable onError - the Consumer&lt;Throwable&gt; you have designed to accept any error notification from the current Observable Returns: the new Disposable instance that can be used to dispose the subscription at any time" />
      <item value="Android Schedulers" />
      <item value="Constant" />
      <item value="Would like to have the screen in a landscape orientation: that is, with the display wider than it is tall, ignoring sensor data. Corresponds to {@link android.content.pm.ActivityInfoSCREEN_ORIENTATION_LANDSCAPE}." />
      <item value="cancel" />
      <item value="Makes the TextView be exactly this wide. You could get the same effect by specifying this number in the layout parameters." />
      <item value="Preferred padding for dialog content." />
      <item value="The animation plays backward." />
      <item value="Sets the state-based animator for the View." />
      <item value="There is no content type. The text is not editable." />
      <item value="Defines whether this view reacts to long click events." />
      <item value="Indicates that the content of a non-editable text can be selected" />
      <item value="Can't toast on a thread that has not called Looper.prepare()" />
      <item value="request Exception" />
      <item value="MVP Framework" />
      <item value="Area" />
      <item value="get Link" />
      <item value="Text that will be used as a URI. Corresponds to {@link android.text.InputTypeTYPE_CLASS_TEXT} | {@link android.text.InputTypeTYPE_TEXT_VARIATION_URI}." />
      <item value="Describes the content of a view so that a autofill service can fill in the appropriate data. Multiple hints can be combined in a comma separated list or an array of strings to mean e.g. emailAddress or postalAddress." />
      <item value="No virtual method getInsetsController()LandroidviewWindowInsetsController; in class LandroidviewWindow; or its super classes (declaration of 'android.view.Window' appears in systemframeworkframework.jar!classes3.dex)" />
      <item value="No virtual method getWindowInsetsController" />
      <item value="比拟" />
      <item value="presenter" />
      <item value="explain" />
      <item value="Whether to allow the application to participate in the backup and restore infrastructure. If this attribute is set to false, no backup or restore of the application will ever be performed, even by a full-system backup that would otherwise cause all application data to be saved via adb. The default value of this attribute is true." />
      <item value="Declare that your application will be able to deal with RTL (right to left) layouts. The default value is false." />
      <item value="theme" />
      <item value="window Translucent Status" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1228" />
        <entry key="ENGLISH" value="1229" />
        <entry key="DANISH" value="3" />
        <entry key="GERMAN" value="8" />
        <entry key="FRENCH" value="1" />
        <entry key="FILIPINO" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALAYALAM" value="1" />
        <entry key="BENGALI" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SWEDISH" value="3" />
        <entry key="SLOVAK" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="5" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1624530466253" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20200918000568375" />
      </app-key>
    </option>
    <option name="translateDocumentation" value="true" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="2f2d5e6a9f7e1244" />
      </youdao-translate>
    </option>
  </component>
</application>