<application>
  <component name="AppStorage">
    <histories>
      <item value="verify Right" />
      <item value="Count Down Timer" />
      <item value="The specified child already has a parent. You must call removeView() on the child's parent first." />
      <item value="Sets whether this dialog is canceled when touched outside the window's bounds. If setting to true, the dialog is set to be cancelable if not already set." />
      <item value="Sets whether this dialog is cancelable with the BACK key." />
      <item value="Schedules a commit of this transaction. The commit does not happen immediately; it will be scheduled as work on the main thread to be done the next time that thread is ready. A transaction can only be committed with this method prior to its containing activity saving its state. If the commit is attempted after that point, an exception will be thrown. This is because the state after the commit can be lost if the activity needs to be restored from its state. See commitAllowingStateLoss() for situations where it may be okay to lose the commit." />
      <item value="Like commit but allows the commit to be executed after an activity's state is saved. This is dangerous because the commit can be lost if the activity needs to later be restored from its state, so this should only be used for cases where it is okay for the UI state to change unexpectedly on the user." />
      <item value="Avoid passing null as the view root (needed to resolve layout parameters on the inflated layout's root element)" />
      <item value="attach To Root" />
      <item value="Called to have the fragment instantiate its user interface view. This is optional, and non-graphical fragments can return null. This will be called between onCreate(Bundle) and onActivityCreated(Bundle). A default View can be returned by calling Fragment(int) in your constructor. Otherwise, this method returns null. It is recommended to only inflate the layout in this method and move logic that operates on the returned View to onViewCreated(View, Bundle). If you return a View from here, you will later be called in onDestroyView when the view is being released." />
      <item value="Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. This gives subclasses a chance to initialize themselves once they know their view hierarchy has been completely created. The fragment's view hierarchy is not however attached to its parent at this point." />
      <item value="fragment safety verify" />
      <item value="fragment" />
      <item value="Transaction" />
      <item value="Fragment Transaction" />
      <item value="text Success" />
      <item value="text Verify Code" />
      <item value="text Setting" />
      <item value="text Verify" />
      <item value="Verify" />
      <item value="test And Verify" />
      <item value="page Progress Bar" />
      <item value="Pager" />
      <item value="Pager Progress Bar" />
      <item value="pager Progress Bar" />
      <item value="Useless Leaf" />
      <item value="darker gray" />
      <item value="dialog input captcha" />
      <item value="text Email Address" />
      <item value="safety verification" />
      <item value="Problem decoding into existing bitmap" />
      <item value="Synonym for decodeResource(Resources, int, BitmapFactory.Options) with null Options." />
      <item value="Attempt to invoke virtual method 'boolean android.graphics.Bitmap.isRecycled()' on a null object reference" />
      <item value="the rectangle's height. This does not check for a valid rectangle (i.e. top &lt;= bottom) so the result may be negative." />
      <item value="measure Text Offset" />
      <item value="Set the paint's text alignment. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on." />
      <item value="set Text Align" />
      <item value="Helper for setFlags(), setting or clearing the ANTI_ALIAS_FLAG bit AntiAliasing smooths out the edges of what is being drawn, but is has no impact on the interior of the shape. See setDither() and setFilterBitmap() to affect how colors are treated." />
      <item value="set Anti Alias" />
      <item value="set Now Serial Number" />
      <item value="invalidate" />
      <item value="request Layout" />
      <item value="Forces this view to be laid out during the next layout pass. This method does not call requestLayout() or forceLayout() on the parent." />
      <item value="force Layout" />
      <item value="ompletions Amount" />
      <item value="completions Amount" />
      <item value="Completions Amount" />
      <item value="Amount" />
      <item value="set Completions Amount" />
      <item value="completions" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="462" />
        <entry key="ENGLISH" value="463" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="4" />
        <entry key="MALAYALAM" value="1" />
        <entry key="BENGALI" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="INDONESIAN" value="3" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20200918000568375" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="2f2d5e6a9f7e1244" />
      </youdao-translate>
    </option>
  </component>
</application>